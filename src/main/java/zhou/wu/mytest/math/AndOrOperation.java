package zhou.wu.mytest.math;

/**
 * 与或运算
 * @author lin.xc
 * @date 2021/7/2
 **/
public class AndOrOperation {
    public static void main(String[] args) {
        op1();
        op2();
        op3();
    }

    /**
     * 具体规则为：两个二进制对应位为0时该位为0，否则为1。
     * 拿5的二进制 0000 0101 和 3的二进制 0000 0011 进行|运算，后三位的的对应位都不是同时等于0，所以最终结果为 0000 0111 也就是7的二进制。
     * */
    public static void op1() {
        // 关于 |= 运算符：|= 运算符和 += 这一类的运算符一样，拆解开就是 a = a | b；
        int a = 5; // 0000 0101
        int b = 3; // 0000 0011
        a |= b; // 0000 00111
        System.out.println("a |= b结果a="+a);
    }

    /**
     * 具体规则为：两个二进制对应位都为1时，结果为1，否则结果为都0。
     * 拿5的二进制 0000 0101 和 3的二进制 0000 0011 进行&运算，只有最后一位都为1，则最终结果为 0000 0001 也就是1的二进制。
     * */
    public static void op2() {
        int a = 5; // 0000 0101
        int b = 3; // 0000 0011
        // 拆解开就是 a = a & b；
        a &= b; // 0000 0001
        System.out.println("a &= b结果a="+a);
    }

    /**
     * 具体规则为：两个二进制对应位相同时，结果为0，否则结果为1。
     * 拿5的二进制 0000 0101 和 3的二进制 0000 0011 进行^运算，1-5位对应位都是0所以1-5位都为0，第8位都为1所以第8位也为0，
     * 其他的对应位都不相等所以为1，则最终结果为 0000 0110 也就是6的二进制。
     * */
    public static void op3() {
        int a = 5; // 0000 0101
        int b = 3; // 0000 0011
        // 拆解开就是 a = a ^ b；
        a ^= b; // 0000 0110
        System.out.println("a ^= b结果a="+a);
    }
}
